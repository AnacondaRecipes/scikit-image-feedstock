From a2714ac45aa58b1621818db69d35c9ee75c5d4c2 Mon Sep 17 00:00:00 2001
From: Egor Panfilov <egor.v.panfilov@gmail.com>
Date: Thu, 22 Nov 2018 22:16:02 +0200
Subject: [PATCH] Merge pull request #3556 from sciunto/bugfix-3551

Handle deprecation of numpy `_validate_lengths`
---
 TODO.txt                  |   2 +
 skimage/util/arraycrop.py | 142 ++++----------------------------------
 2 files changed, 14 insertions(+), 130 deletions(-)

diff --git a/TODO.txt b/TODO.txt
index 75f7097746..46652bfe41 100644
--- a/TODO.txt
+++ b/TODO.txt
@@ -65,3 +65,5 @@ Other
 * Monitor SimpleITK Pypi releases to find when a 3.7 release comes out.
   Remove version restriction in requirements file when appropriate.
   `https://github.com/SimpleITK/SimpleITK/issues/551`
+* Remove the conditional import and function call when ``numpy`` is set
+  to > 1.15.x in ``skimage/util/arraycrop.py``.
diff --git a/skimage/util/arraycrop.py b/skimage/util/arraycrop.py
index e83a6c61be..57bd79bfa2 100644
--- a/skimage/util/arraycrop.py
+++ b/skimage/util/arraycrop.py
@@ -5,140 +5,19 @@
 from __future__ import division, absolute_import, print_function
 
 import numpy as np
-from numpy.lib.arraypad import _validate_lengths
 
+# After numpy 1.15, a new backward compatible function have been implemented.
+# See https://github.com/numpy/numpy/pull/11966
+from distutils.version import LooseVersion as Version
+old_numpy = Version(np.__version__) < Version('1.16')
+if old_numpy:
+    from numpy.lib.arraypad import _validate_lengths
+else:
+    from numpy.lib.arraypad import _as_pairs
 
 __all__ = ['crop']
 
 
-# The below functions are retained in comments in case the NumPy architecture
-# changes and we need copies of these helper functions for `crop`.
-# These are identical to functions in numpy.lib.arraypad.py as of NumPy v1.11
-
-# def _normalize_shape(ndarray, shape, cast_to_int=True):
-#     """
-#     Private function which does some checks and normalizes the possibly
-#     much simpler representations of 'pad_width', 'stat_length',
-#     'constant_values', 'end_values'.
-#
-#     Parameters
-#     ----------
-#     narray : ndarray
-#         Input ndarray
-#     shape : {sequence, array_like, float, int}, optional
-#         The width of padding (pad_width), the number of elements on the
-#         edge of the narray used for statistics (stat_length), the constant
-#         value(s) to use when filling padded regions (constant_values), or the
-#         endpoint target(s) for linear ramps (end_values).
-#         ((before_1, after_1), ... (before_N, after_N)) unique number of
-#         elements for each axis where `N` is rank of `narray`.
-#         ((before, after),) yields same before and after constants for each
-#         axis.
-#         (constant,) or val is a shortcut for before = after = constant for
-#         all axes.
-#     cast_to_int : bool, optional
-#         Controls if values in ``shape`` will be rounded and cast to int
-#         before being returned.
-#
-#     Returns
-#     -------
-#     normalized_shape : tuple of tuples
-#         val                               => ((val, val), (val, val), ...)
-#         [[val1, val2], [val3, val4], ...] => ((val1, val2), (val3, val4), ...)
-#         ((val1, val2), (val3, val4), ...) => no change
-#         [[val1, val2], ]                  => ((val1, val2), (val1, val2), ...)
-#         ((val1, val2), )                  => ((val1, val2), (val1, val2), ...)
-#         [[val ,     ], ]                  => ((val, val), (val, val), ...)
-#         ((val ,     ), )                  => ((val, val), (val, val), ...)
-#
-#     """
-#     ndims = ndarray.ndim
-#
-#     # Shortcut shape=None
-#     if shape is None:
-#         return ((None, None), ) * ndims
-#
-#     # Convert any input `info` to a NumPy array
-#     arr = np.asarray(shape)
-#
-#     # Switch based on what input looks like
-#     if arr.ndim <= 1:
-#         if arr.shape == () or arr.shape == (1,):
-#             # Single scalar input
-#             #   Create new array of ones, multiply by the scalar
-#             arr = np.ones((ndims, 2), dtype=ndarray.dtype) * arr
-#         elif arr.shape == (2,):
-#             # Apply padding (before, after) each axis
-#             #   Create new axis 0, repeat along it for every axis
-#             arr = arr[np.newaxis, :].repeat(ndims, axis=0)
-#         else:
-#             fmt = "Unable to create correctly shaped tuple from %s"
-#             raise ValueError(fmt % (shape,))
-#
-#     elif arr.ndim == 2:
-#         if arr.shape[1] == 1 and arr.shape[0] == ndims:
-#             # Padded before and after by the same amount
-#             arr = arr.repeat(2, axis=1)
-#         elif arr.shape[0] == ndims:
-#             # Input correctly formatted, pass it on as `arr`
-#             arr = shape
-#         else:
-#             fmt = "Unable to create correctly shaped tuple from %s"
-#             raise ValueError(fmt % (shape,))
-#
-#     else:
-#         fmt = "Unable to create correctly shaped tuple from %s"
-#         raise ValueError(fmt % (shape,))
-#
-#     # Cast if necessary
-#     if cast_to_int is True:
-#         arr = np.round(arr).astype(int)
-#
-#     # Convert list of lists to tuple of tuples
-#     return tuple(tuple(axis) for axis in arr.tolist())
-
-
-# def _validate_lengths(narray, number_elements):
-#     """
-#     Private function which does some checks and reformats pad_width and
-#     stat_length using _normalize_shape.
-#
-#     Parameters
-#     ----------
-#     narray : ndarray
-#         Input ndarray
-#     number_elements : {sequence, int}, optional
-#         The width of padding (pad_width) or the number of elements on the edge
-#         of the narray used for statistics (stat_length).
-#         ((before_1, after_1), ... (before_N, after_N)) unique number of
-#         elements for each axis.
-#         ((before, after),) yields same before and after constants for each
-#         axis.
-#         (constant,) or int is a shortcut for before = after = constant for all
-#         axes.
-#
-#     Returns
-#     -------
-#     _validate_lengths : tuple of tuples
-#         int                               => ((int, int), (int, int), ...)
-#         [[int1, int2], [int3, int4], ...] => ((int1, int2), (int3, int4), ...)
-#         ((int1, int2), (int3, int4), ...) => no change
-#         [[int1, int2], ]                  => ((int1, int2), (int1, int2), ...)
-#         ((int1, int2), )                  => ((int1, int2), (int1, int2), ...)
-#         [[int ,     ], ]                  => ((int, int), (int, int), ...)
-#         ((int ,     ), )                  => ((int, int), (int, int), ...)
-#
-#     """
-#     normshp = _normalize_shape(narray, number_elements)
-#     for i in normshp:
-#         chk = [1 if x is None else x for x in i]
-#         chk = [1 if x >= 0 else -1 for x in chk]
-#         if (chk[0] < 0) or (chk[1] < 0):
-#             fmt = "%s cannot contain negative values."
-#             raise ValueError(fmt % (number_elements,))
-#     return normshp
-
-
 def crop(ar, crop_width, copy=False, order='K'):
     """Crop array `ar` by `crop_width` along each dimension.
 
@@ -169,7 +48,10 @@ def crop(ar, crop_width, copy=False, order='K'):
         view of the input array.
     """
     ar = np.array(ar, copy=False)
-    crops = _validate_lengths(ar, crop_width)
+    if old_numpy:
+        crops = _validate_lengths(ar, crop_width)
+    else:
+        crops = _as_pairs(crop_width, ar.ndim, as_index=True)
     slices = tuple(slice(a, ar.shape[i] - b)
                    for i, (a, b) in enumerate(crops))
     if copy:
